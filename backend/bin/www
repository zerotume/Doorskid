#!/usr/bin/env node

require('dotenv').config();

const { port } = require('../config');

const app = require('../app');
const db = require('../db/models');
const {User, Channelmessage} = require('../db/models');
const http = require('http');

const server = http.createServer(app);
const io = require("socket.io")(server);

io.on("connection", socket => {
  socket.on("join", async (userId) => {
    const currentUser = await User.findByPk(userId);
    let servers = await currentUser.getServers();
    servers.forEach(s => {
      let server = s.toJSON();
      socket.join(server.id.toString());
    });
    // console.log(serverArray);
    // for(ele of serverArray){
    //   socket.join(ele.id.toString);
    // }
  });

  socket.on("channelmessage",
          async ({serverId, channelId, content, userId, sendTime}) => {
    const d = new Date();
    receiveTime = d.getTime()
    console.log({serverId, channelId, content, userId});
    console.log("Delayed ", (receiveTime - sendTime)/60000);
    let newMessage = await Channelmessage.create({
      channelId,
      senderId:userId,
      content
    });
    newMessage = newMessage.toJSON();
    io.to(serverId.toString()).emit('channelbroadcast', {newMessage, serverId, channelId});
  });

  socket.on("deleteChannelmessage", async ({msgId, serverId, channelId}) => {
    console.log("?");
    let message = await Channelmessage.findByPk(msgId);
    await message.destroy();
    io.to(serverId.toString()).emit('channelbroadcast', serverId, channelId)
  });
})


db.sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection success! Sequelize is ready to use...');

    server.listen(port, () => console.log(`Listening on port ${port}...`));
    // server.on("error", onError);
    // server.on("listening", onListening);
  })
  .catch((err) => {
    console.log('Database connection failure.');
    console.error(err);
  });
